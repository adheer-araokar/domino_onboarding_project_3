# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PredictionResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, prediction_id: str=None, prediction: float=None):  # noqa: E501
        """PredictionResponse - a model defined in Swagger

        :param prediction_id: The prediction_id of this PredictionResponse.  # noqa: E501
        :type prediction_id: str
        :param prediction: The prediction of this PredictionResponse.  # noqa: E501
        :type prediction: float
        """
        self.swagger_types = {
            'prediction_id': str,
            'prediction': float
        }

        self.attribute_map = {
            'prediction_id': 'prediction_id',
            'prediction': 'prediction'
        }
        self._prediction_id = prediction_id
        self._prediction = prediction

    @classmethod
    def from_dict(cls, dikt) -> 'PredictionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The predictionResponse of this PredictionResponse.  # noqa: E501
        :rtype: PredictionResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prediction_id(self) -> str:
        """Gets the prediction_id of this PredictionResponse.


        :return: The prediction_id of this PredictionResponse.
        :rtype: str
        """
        return self._prediction_id

    @prediction_id.setter
    def prediction_id(self, prediction_id: str):
        """Sets the prediction_id of this PredictionResponse.


        :param prediction_id: The prediction_id of this PredictionResponse.
        :type prediction_id: str
        """
        if prediction_id is None:
            raise ValueError("Invalid value for `prediction_id`, must not be `None`")  # noqa: E501

        self._prediction_id = prediction_id

    @property
    def prediction(self) -> float:
        """Gets the prediction of this PredictionResponse.


        :return: The prediction of this PredictionResponse.
        :rtype: float
        """
        return self._prediction

    @prediction.setter
    def prediction(self, prediction: float):
        """Sets the prediction of this PredictionResponse.


        :param prediction: The prediction of this PredictionResponse.
        :type prediction: float
        """
        if prediction is None:
            raise ValueError("Invalid value for `prediction`, must not be `None`")  # noqa: E501

        self._prediction = prediction
